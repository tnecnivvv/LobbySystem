import io.papermc.paperweight.userdev.ReobfArtifactConfiguration

plugins {
    id 'java'
    id 'io.papermc.paperweight.userdev' version '2.0.0-beta.14'
    id 'io.github.goooler.shadow' version '8.1.8'
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

group = 'com.tnecnivvv'
version = '1.0.0-BETA'

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.2'
    paperweightDevelopmentBundle 'io.papermc.paper:dev-bundle:1.21.4-R0.1-SNAPSHOT'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

paperweight {
    reobfArtifactConfiguration = ReobfArtifactConfiguration.getMOJANG_PRODUCTION()
}

shadowJar {
    relocate("com.fasterxml.jackson.core", "org.tnecnivvv.libs.jackson.core")
    relocate("com.fasterxml.jackson.databind", "org.tnecnivvv.libs.jackson.databind")
    relocate("com.fasterxml.jackson.dataformat", "org.tnecnivvv.libs.jackson.dataformat")
}

tasks.register("renameReobfJar", Copy) {
    dependsOn tasks.named("reobfJar")
    from(tasks.named("reobfJar").get().outputs.files)
    into(project.layout.buildDirectory.dir("libs"))
    rename { String fileName ->
        "LobbySystem.jar"
    }

    def reobfJarFile = project.layout.buildDirectory.file("libs/LobbySystem.jar").get().asFile

    doLast {
        if (!reobfJarFile.exists()) {
            throw new GradleException("The renamed JAR file does not exist!")
        }
    }
}

tasks.assemble {
    dependsOn renameReobfJar
}